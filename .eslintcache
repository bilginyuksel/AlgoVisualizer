[{"C:\\Users\\bilgi\\Documents\\algo-visualizer\\src\\index.js":"1","C:\\Users\\bilgi\\Documents\\algo-visualizer\\src\\reportWebVitals.js":"2","C:\\Users\\bilgi\\Documents\\algo-visualizer\\src\\App.js":"3","C:\\Users\\bilgi\\Documents\\algo-visualizer\\src\\sort\\SelectionSort.js":"4","C:\\Users\\bilgi\\Documents\\algo-visualizer\\src\\sort\\Utils.js":"5","C:\\Users\\bilgi\\Documents\\algo-visualizer\\src\\sort\\BubbleSort.js":"6","C:\\Users\\bilgi\\Documents\\algo-visualizer\\src\\sort\\InsertionSort.js":"7","C:\\Users\\bilgi\\Documents\\algo-visualizer\\src\\sort\\CountingSort.js":"8"},{"size":289,"mtime":1612130875182,"results":"9","hashOfConfig":"10"},{"size":362,"mtime":499162500000,"results":"11","hashOfConfig":"10"},{"size":1079,"mtime":1612130814800,"results":"12","hashOfConfig":"10"},{"size":4733,"mtime":1612289757721,"results":"13","hashOfConfig":"10"},{"size":2247,"mtime":1612289919047,"results":"14","hashOfConfig":"10"},{"size":2755,"mtime":1612126486150,"results":"15","hashOfConfig":"10"},{"size":2629,"mtime":1612127794440,"results":"16","hashOfConfig":"10"},{"size":3370,"mtime":1612130279630,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1f2uwf0",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"20"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"20"},"C:\\Users\\bilgi\\Documents\\algo-visualizer\\src\\index.js",[],["38","39"],"C:\\Users\\bilgi\\Documents\\algo-visualizer\\src\\reportWebVitals.js",[],"C:\\Users\\bilgi\\Documents\\algo-visualizer\\src\\App.js",[],"C:\\Users\\bilgi\\Documents\\algo-visualizer\\src\\sort\\SelectionSort.js",["40","41","42","43","44","45","46","47"],"C:\\Users\\bilgi\\Documents\\algo-visualizer\\src\\sort\\Utils.js",[],"C:\\Users\\bilgi\\Documents\\algo-visualizer\\src\\sort\\BubbleSort.js",["48","49"],"import { useState, useEffect } from 'react';\r\nimport { getPillars, sleep, getPillarStyles } from './Utils';\r\n\r\n\r\nexport default function BubbleSort() {\r\n  const [pillars, setPillars] = useState(getPillars(8));\r\n  const [count, setCount] = useState(10);\r\n  const [speed, setSpeed] = useState([150]);\r\n  const [isStopped, stop] = useState([true]);\r\n\r\n  useEffect(() => {\r\n\r\n  }, [pillars]);\r\n\r\n  const updateColor = async (pillar, color) => {\r\n    pillar.color = color;\r\n    setPillars([...pillars]);\r\n    await sleep(speed);\r\n  };\r\n\r\n  const swap = async (i, j) => {\r\n    const temp = pillars[i];\r\n    pillars[i] = pillars[j];\r\n    pillars[j] = temp;\r\n  };\r\n\r\n\r\n  const sort = async () => {\r\n    isStopped[0] = false;\r\n    for (let i = 0; i < pillars.length; i++) {\r\n      if (isStopped[0]) break;\r\n      for (let j = 0; j < pillars.length - 1 - i; j++) {\r\n        if (isStopped[0]) break;\r\n        if(j-1>=0) pillars[j-1].color = 'gray';\r\n        await updateColor(pillars[j], 'blue');\r\n        if (pillars[j].val > pillars[j + 1].val) {\r\n          await updateColor(pillars[j+1], 'green');\r\n          await swap(j, j + 1);\r\n        } else {\r\n          await updateColor(pillars[j+1], 'red')\r\n        } \r\n      }\r\n      const currentLastIdx = pillars.length - 1 - i;\r\n      if(currentLastIdx - 1 > 0) await updateColor(pillars[currentLastIdx-1], 'gray');\r\n      await updateColor(pillars[currentLastIdx], 'green');\r\n    }\r\n  };\r\n\r\n  const onSpeedChange = (event) => {\r\n    speed[0] = parseInt(event.target.value);\r\n  };\r\n\r\n  const onStop = () => {\r\n    isStopped[0] = true;\r\n  };\r\n\r\n  const onPillarCountChanged = (event) => {\r\n    const pillarCount = parseInt(event.target.value);\r\n    setCount(pillarCount);\r\n    setPillars(getPillars(pillarCount));\r\n  };\r\n\r\n  return (\r\n    <div className=\"app\">\r\n\r\n      <h1>Bubble Sort Algorithm</h1>\r\n\r\n      <div className=\"container\">\r\n        {pillars.map((pillar, idx) => (\r\n          <div className=\"pillar\"\r\n            key={`${idx}-${pillar.val}`}\r\n            style={getPillarStyles(pillar)}>\r\n          </div>))}\r\n      </div>\r\n\r\n      <div className=\"input-container\">\r\n        <label htmlFor=\"speed-range\">Speed</label>\r\n        <input id=\"speed-range\"\r\n          type=\"range\"\r\n          min=\"0\"\r\n          max=\"1000\"\r\n          step=\"5\"\r\n          value={speed}\r\n          onChange={onSpeedChange}>\r\n        </input>\r\n\r\n        <label htmlFor=\"count-range\">Count</label>\r\n        <input id=\"count-range\"\r\n          type=\"range\"\r\n          min=\"6\"\r\n          max=\"80\"\r\n          step=\"1\"\r\n          value={count}\r\n          onChange={onPillarCountChanged}>\r\n        </input>\r\n\r\n        <button onClick={sort}>Sort</button>\r\n        <button onClick={onStop}>Stop</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}","C:\\Users\\bilgi\\Documents\\algo-visualizer\\src\\sort\\InsertionSort.js",["50","51"],"import { useState, useEffect } from 'react';\r\nimport { getPillars, sleep, getPillarStyles } from './Utils';\r\n\r\nexport default function InsertionSort() {\r\n  const [pillars, setPillars] = useState(getPillars(8));\r\n  const [count, setCount] = useState(10);\r\n  const [speed, setSpeed] = useState([150]);\r\n  const [isStopped, stop] = useState([true]);\r\n\r\n  useEffect(() => {\r\n\r\n  }, [pillars]);\r\n\r\n  const updateColor = async (pillar, color) => {\r\n    pillar.color = color;\r\n    setPillars([...pillars]);\r\n    await sleep(speed);\r\n  };\r\n\r\n  const swap = async (i, j) => {\r\n    const temp = pillars[i];\r\n    pillars[i] = pillars[j];\r\n    pillars[j] = temp;\r\n    await updateColor(pillars[i], 'gray');\r\n  };\r\n\r\n  const sort = async () => {\r\n    isStopped[0] = false;\r\n    for (let i = 0; i < pillars.length; i++) {\r\n      if(isStopped[0]) break;\r\n      let j = i;\r\n      await updateColor(pillars[i], 'aqua');\r\n      if (i + 1 < pillars.length)\r\n        await updateColor(pillars[i + 1], 'purple');\r\n\r\n      while (j > 0 && pillars[j].val < pillars[j - 1].val) {\r\n      if(isStopped[0]) break;\r\n        if (j - 1 !== i)\r\n          await updateColor(pillars[j - 1], 'greenyellow');\r\n        await swap(j, j - 1);\r\n        j--;\r\n      }\r\n      if (j >= 0) await updateColor(pillars[j], 'gray');\r\n    }\r\n  };\r\n\r\n  const onSpeedChange = (event) => {\r\n    speed[0] = parseInt(event.target.value);\r\n  };\r\n\r\n  const onStop = () => {\r\n    isStopped[0] = true;\r\n  };\r\n\r\n  const onPillarCountChanged = (event) => {\r\n    const pillarCount = parseInt(event.target.value);\r\n    setCount(pillarCount);\r\n    setPillars(getPillars(pillarCount));\r\n  };\r\n\r\n  return (\r\n    <div className=\"app\">\r\n\r\n      <h1>Insertion Sort Algorithm</h1>\r\n\r\n      <div className=\"container\">\r\n        {pillars.map((pillar, idx) => (\r\n          <div className=\"pillar\"\r\n            key={`${idx}-${pillar.val}`}\r\n            style={getPillarStyles(pillar)}>\r\n          </div>))}\r\n      </div>\r\n\r\n      <div className=\"input-container\">\r\n        <label htmlFor=\"speed-range\">Speed</label>\r\n        <input id=\"speed-range\"\r\n          type=\"range\"\r\n          min=\"0\"\r\n          max=\"1000\"\r\n          step=\"5\"\r\n          value={speed}\r\n          onChange={onSpeedChange}>\r\n        </input>\r\n\r\n        <label htmlFor=\"count-range\">Count</label>\r\n        <input id=\"count-range\"\r\n          type=\"range\"\r\n          min=\"6\"\r\n          max=\"80\"\r\n          step=\"1\"\r\n          value={count}\r\n          onChange={onPillarCountChanged}>\r\n        </input>\r\n\r\n        <button onClick={sort}>Sort</button>\r\n        <button onClick={onStop}>Stop</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}","C:\\Users\\bilgi\\Documents\\algo-visualizer\\src\\sort\\CountingSort.js",["52","53","54","55"],"import { useState, useEffect } from 'react';\r\nimport { getPillars, getPillar, sleep, getPillarStyles, MIN_PILLAR_VALUE, MAX_PILLAR_VALUE } from './Utils';\r\n\r\nexport default function CountingSort() {\r\n  const [pillars, setPillars] = useState(getPillars(8));\r\n  const [freqPillars, setFreqPillars] = useState([]);\r\n  const [count, setCount] = useState(10);\r\n  const [speed, setSpeed] = useState([150]);\r\n  const [isStopped, stop] = useState([true]);\r\n\r\n  useEffect(() => {\r\n\r\n  }, [pillars, freqPillars]);\r\n\r\n  const updateColor = async (pillar, color) => {\r\n    pillar.color = color;\r\n    setPillars([...pillars]);\r\n    await sleep(speed);\r\n  };\r\n\r\n  const getMaxValOfPillar = () => {\r\n    let max = pillars[0].val;\r\n    pillars.forEach(pillar => {\r\n      if(pillar.val > max) {\r\n        max = pillar.val;\r\n      }\r\n    });\r\n    return max;\r\n  };\r\n\r\n  const sort = async () => {\r\n    isStopped[0] = false;\r\n    const maxFreq = getMaxValOfPillar(); \r\n    for (let i = 0; i <= maxFreq; i++)\r\n      freqPillars.push({ ...getPillar(i), 'freq': 0 });\r\n    setFreqPillars([...freqPillars]);\r\n\r\n    for (let i = 0; i < pillars.length; i++) {\r\n      if (isStopped[0]) break;\r\n      await updateColor(freqPillars[pillars[i].val], 'green');\r\n      freqPillars[pillars[i].val].freq++;\r\n      await updateColor(freqPillars[pillars[i].val], 'gray');\r\n    }\r\n    let idx = 0;\r\n    for (let i = 0; i < freqPillars.length; i++) {\r\n      if (isStopped[0]) break;\r\n      let currentFreq = freqPillars[i].freq;\r\n      while (currentFreq-- > 0) {\r\n        if (isStopped[0]) break;\r\n        pillars[idx].val = i;\r\n        await updateColor(pillars[idx], 'green');\r\n        idx++;\r\n      }\r\n    }\r\n  };\r\n\r\n  const onSpeedChange = (event) => {\r\n    speed[0] = parseInt(event.target.value);\r\n  };\r\n\r\n  const onStop = () => {\r\n    isStopped[0] = true;\r\n  };\r\n\r\n  const onPillarCountChanged = (event) => {\r\n    const pillarCount = parseInt(event.target.value);\r\n    setCount(pillarCount);\r\n    setPillars(getPillars(pillarCount));\r\n  };\r\n\r\n  return (\r\n    <div className=\"app\">\r\n\r\n      <h1>Counting Sort Algorithm</h1>\r\n\r\n      <div className=\"container\">\r\n        {pillars.map((pillar, idx) => (\r\n          <div className=\"pillar\"\r\n            key={`${idx}-${pillar.val}`}\r\n            style={getPillarStyles(pillar, 5)}>\r\n          </div>))}\r\n      </div>\r\n\r\n      <div className=\"container\">\r\n        {freqPillars.map((freqPillar, idx) => (\r\n          <div>\r\n            {freqPillar.freq}\r\n            <div className=\"pillar\"\r\n              key={`${idx}-${freqPillar.val}-${freqPillar.freq}`}\r\n              style={getPillarStyles(freqPillar, 3)}>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      <div className=\"input-container\">\r\n        <label htmlFor=\"speed-range\">Speed</label>\r\n        <input id=\"speed-range\"\r\n          type=\"range\"\r\n          min=\"0\"\r\n          max=\"1000\"\r\n          step=\"5\"\r\n          value={speed}\r\n          onChange={onSpeedChange}>\r\n        </input>\r\n\r\n        <label htmlFor=\"count-range\">Count</label>\r\n        <input id=\"count-range\"\r\n          type=\"range\"\r\n          min=\"6\"\r\n          max=\"80\"\r\n          step=\"1\"\r\n          value={count}\r\n          onChange={onPillarCountChanged}>\r\n        </input>\r\n\r\n        <button onClick={sort}>Sort</button>\r\n        <button onClick={onStop}>Stop</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}",{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","severity":1,"message":"61","line":4,"column":7,"nodeType":"62","messageId":"63","endLine":4,"endColumn":30},{"ruleId":"60","severity":1,"message":"64","line":25,"column":17,"nodeType":"62","messageId":"63","endLine":25,"endColumn":25},{"ruleId":"60","severity":1,"message":"65","line":26,"column":21,"nodeType":"62","messageId":"63","endLine":26,"endColumn":25},{"ruleId":"60","severity":1,"message":"66","line":27,"column":10,"nodeType":"62","messageId":"63","endLine":27,"endColumn":15},{"ruleId":"60","severity":1,"message":"67","line":27,"column":17,"nodeType":"62","messageId":"63","endLine":27,"endColumn":25},{"ruleId":"60","severity":1,"message":"68","line":28,"column":10,"nodeType":"62","messageId":"63","endLine":28,"endColumn":16},{"ruleId":"60","severity":1,"message":"69","line":28,"column":18,"nodeType":"62","messageId":"63","endLine":28,"endColumn":27},{"ruleId":"60","severity":1,"message":"70","line":95,"column":9,"nodeType":"62","messageId":"63","endLine":95,"endColumn":13},{"ruleId":"60","severity":1,"message":"64","line":8,"column":17,"nodeType":"62","messageId":"63","endLine":8,"endColumn":25},{"ruleId":"60","severity":1,"message":"65","line":9,"column":21,"nodeType":"62","messageId":"63","endLine":9,"endColumn":25},{"ruleId":"60","severity":1,"message":"64","line":7,"column":17,"nodeType":"62","messageId":"63","endLine":7,"endColumn":25},{"ruleId":"60","severity":1,"message":"65","line":8,"column":21,"nodeType":"62","messageId":"63","endLine":8,"endColumn":25},{"ruleId":"60","severity":1,"message":"71","line":2,"column":57,"nodeType":"62","messageId":"63","endLine":2,"endColumn":73},{"ruleId":"60","severity":1,"message":"72","line":2,"column":75,"nodeType":"62","messageId":"63","endLine":2,"endColumn":91},{"ruleId":"60","severity":1,"message":"64","line":8,"column":17,"nodeType":"62","messageId":"63","endLine":8,"endColumn":25},{"ruleId":"60","severity":1,"message":"65","line":9,"column":21,"nodeType":"62","messageId":"63","endLine":9,"endColumn":25},"no-native-reassign",["73"],"no-negated-in-lhs",["74"],"no-unused-vars","'SelectionSortAlgoRunner' is defined but never used.","Identifier","unusedVar","'setSpeed' is assigned a value but never used.","'stop' is assigned a value but never used.","'steps' is assigned a value but never used.","'setSteps' is assigned a value but never used.","'record' is assigned a value but never used.","'setRecord' is assigned a value but never used.","'sort' is assigned a value but never used.","'MIN_PILLAR_VALUE' is defined but never used.","'MAX_PILLAR_VALUE' is defined but never used.","no-global-assign","no-unsafe-negation"]